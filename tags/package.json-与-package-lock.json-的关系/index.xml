<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>package.json 与 package-lock.json 的关系 - Tag - Summer&#39;s Blog</title>
        <link>https://ballerjay.github.io/tags/package.json-%E4%B8%8E-package-lock.json-%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
        <description>package.json 与 package-lock.json 的关系 - Tag - Summer&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 06 Aug 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://ballerjay.github.io/tags/package.json-%E4%B8%8E-package-lock.json-%E7%9A%84%E5%85%B3%E7%B3%BB/" rel="self" type="application/rss+xml" /><item>
    <title>package.json 与 package-lock.json 的关系</title>
    <link>https://ballerjay.github.io/posts/package/</link>
    <pubDate>Sat, 06 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/package/</guid>
    <description><![CDATA[package.json 和 package-lock.json 之间的关系。
1. Package.json Package.json 用来描述项目及项目所依赖的模块信息。
通过 npm 管理，使用npm init -y就可以自动生成 package.json，安装包依赖关系都由 package.json 来管理。
语义版本控制 版本号由三部分组成: major.minor.patch，对应的就是 主版本.次版本号.修补版本号。
例如: 1.2.3，主要版本 1，次要版本 2，补丁 3。
 补丁中的更改表示不会破坏任何内容的错误修复 次要版本的更改表示不会破坏任何内容的新功能 主要版本的更改表示了一个破坏兼容性的大变化。如果用户不适应主要版本，则内容将无法正常工作。  安装依赖包的版本如何指定 相信大家都会经历过，我们安装一些依赖包的时候，版本号前面都会带^ 或者 ~ 的符号，那么大家有思考过这两个符号代表的是什么吗？
^ 会匹配最新的大版本依赖包，比如^1.2.3 会匹配所有 1.x.x 的包，包括 1.3.0，但是不包括 2.0.0
~ 会匹配最近的小版本依赖包，比如~1.2.3 会匹配所有 1.2.x 的版本，但是不包括 1.3.0
* 安装最新版本的依赖包,比如*1.2.3 会匹配 x.x.x
那么该如何选择呢？当然你可以指定特定的版本号，直接写 1.2.3，前面什么前缀都没有，这样固然没问题，但是如果依赖包发布新版本修复了一些小 bug，那么需要手动修改 package.json 文件;^和~ 则可以解决这个问题。
但是需要注意^版本更新可能比较大，会造成项目代码错误 ❌，所以建议使用~ 来标记版本号，这样可以保证项目不会出现大的问题，也能保证包中的小 bug 可以得到修复。
版本号写*，这意味着安装最新版本的依赖包，但缺点同上，可能会造成版本不兼容，慎用 ⚠️。
多人开发时依赖包安装的问题 看了上面版本号的指定后，我们可以知道，当我们使用了^和~来控制依赖包版本的时候，多人开发，就有可能存在大家安装的依赖包版本不一样的情况，就会存在项目运行的结果不一样。
举个例子: 假设我们在项目中安装了 vue，当我们运行npm install vue -save 的时候，在项目中的 package.]]></description>
</item>
</channel>
</rss>
