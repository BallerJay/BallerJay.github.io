<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - BallerJay&#39;s Blog</title>
        <link>https://ballerjay.github.io/posts/</link>
        <description>All Posts | BallerJay&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 12 Jun 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://ballerjay.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Node.js基础(2) - 模块化</title>
    <link>https://ballerjay.github.io/posts/nodejs_2/</link>
    <pubDate>Mon, 12 Jun 2023 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/nodejs_2/</guid>
    <description><![CDATA[1. 基本概念 模块化是指：在解决复杂问题的时候，自顶向下逐步将系统划分为若干模块的过程，对于整个系统来说，模块是可组合、可分解和可更换的单元。 在编程领域中，一般遵循固定的规则，把一个大文件拆分成独立并且相互依赖的小模块。 提高代码的复用性、可维护性、按需加载。 可以理解为解决复杂问题时的拆分思想。
1.1 模块分类 根据模块来源不同，可以将 Node.js 分为三类：
内置模块：Node.js 官方提供的 自定义模块：用户创建的每个 js 文件都是自定义模块 第三方模块：由第三方开发的模块，非官方提供的内置模块，也不是用户自己创建的自定义模块，使用前需要先下载。 1.2 模块加载 任何种类的模块都可以使用require()方法进行加载引用。
// 内置模块 const fs = require(&#34;fs&#34;); // 自定义模块 const custome = require(&#34;./custome.js&#34;); // 第三方模块 const moment = require(&#34;moment&#34;); 注意：
在使用 require() 方法加载其他模块时，会执行被加载模块的代码。 在使用 require() 方法用户自定义模块时，可以省略 .js 后缀名。 // custome.js console.log(&#34;custome is require&#34;); // test.js const custome = require(&#34;./custome.js&#34;); console.log(custome); // 输出： // custome is require // {} 1.3 模块作用域 与函数作用域相似，在自定义模块中的变量、方法等成员，只能在当前模块中被访问，这种模块级别的访问限制叫做模块作用域。 好处：防止了全局变量的污染问题。]]></description>
</item>
<item>
    <title>Node.js基础(1) - 内置模块</title>
    <link>https://ballerjay.github.io/posts/nodejs_1/</link>
    <pubDate>Sun, 11 Jun 2023 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/nodejs_1/</guid>
    <description><![CDATA[一、Node.js Node.js 是基于 Chrome V8 引擎的 Javascript 运行环境。可以快速构建网络服务及应用，是用 JavaScript 语言构建的服务平台，可用于后端建立服务器。
二、Node.js 内置模块 1. fs 文件系统 Node 官方提供的用来操作文件的模块，它提供了一些一系列方法，满足用户对文件的操作需求。 使用之前需要先导入：const fs = require('fs')
1.1 fs.readFile() 读取指定文件的内容
fs.readFile(path [, option], callBack) 参数1：必选参数， 字符串， 表示文件路径 参数2：可选参数，表示以什么编码格式读取文件 参数3：必选参数，通过回调函数获得读取结果 # 这里 __dirname 表示的是当前路径 fs.readFile(__dirname + &#34;/1.txt&#34;, &#34;utf8&#34;, function (err, data) { if (err) { return console.log(&#34;读取文件失败&#34;, err.message); } console.log(&#34;读取文件成功&#34;, data); }); 1.2 fs.writeFile() 向指定文件中写入内容
fs.writeFile(file, data [, option], callBack) 参数1：必选参数，表示文件路径 参数2：必选参数，写入文件的内容 参数3：可选参数，表示以什么编码格式写入文件 参数4：必选参数，通过回调函数获得写入结果 fs.writeFile(__dirname + &#39;/1.txt&#39;, &#39;aabbccdd&#39;, function(err,dataStr){ if(err) { console.]]></description>
</item>
<item>
    <title>一次性整明白的 React Hook</title>
    <link>https://ballerjay.github.io/posts/reacthooks/</link>
    <pubDate>Thu, 01 Jun 2023 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/reacthooks/</guid>
    <description><![CDATA[useState useState 可以说是我们日常最常用的 hooks 之一了，在实际使用过程中有一些简单的小技巧能帮助你提升性能 &amp; 减少出 bug 的概率。
使用惰性初始值官方文档
通常我们会使用以下的方式初始化 state
const [count, setCount] = useState(0); 对于简单的初始值，这样做完全没有任何性能问题，但如果初始值是根据复杂计算得出来的，我们这样写就会产生性能问题。
const initialState = heavyCompute(() =&gt; { /* do some heavy compute here*/ }); const [state, useState] = useState(initialState); 相信你已经发现这里的问题了对于 useState 的初始值，我们只需要计算一次，但是根据 React Function Component 的渲染逻辑，在每一次 render 的时候，都会重新调用该函数，因此 initialState 在每次 render 时都会被重新计算，哪怕它只在第一次渲染的时候被用到，这无疑会造成严重的性能问题，我们可以通过 useState 的惰性初始值来解决这个问题。
// 这样初始值就只会被计算一次 const [state, setState] = useState(() =&gt; heavyCompute(() =&gt; { /* do some heavy compute here*/ }) ); 不需要把只需要计算一次的东西直接放在函数组件内部顶层的 block 中]]></description>
</item>
<item>
    <title>package.json 与 package-lock.json 的关系</title>
    <link>https://ballerjay.github.io/posts/package/</link>
    <pubDate>Sat, 06 Aug 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/package/</guid>
    <description><![CDATA[1. Package.json Package.json 用来描述项目及项目所依赖的模块信息。
通过 npm 管理，使用npm init -y就可以自动生成 package.json，安装包依赖关系都由 package.json 来管理。
语义版本控制 版本号由三部分组成: major.minor.patch，对应的就是 主版本.次版本号.修补版本号。
例如: 1.2.3，主要版本 1，次要版本 2，补丁 3。
补丁中的更改表示不会破坏任何内容的错误修复 次要版本的更改表示不会破坏任何内容的新功能 主要版本的更改表示了一个破坏兼容性的大变化。如果用户不适应主要版本，则内容将无法正常工作。 安装依赖包的版本如何指定 相信大家都会经历过，我们安装一些依赖包的时候，版本号前面都会带^ 或者 ~ 的符号，那么大家有思考过这两个符号代表的是什么吗？
^ 会匹配最新的大版本依赖包，比如^1.2.3 会匹配所有 1.x.x 的包，包括 1.3.0，但是不包括 2.0.0
~ 会匹配最近的小版本依赖包，比如~1.2.3 会匹配所有 1.2.x 的版本，但是不包括 1.3.0
* 安装最新版本的依赖包,比如*1.2.3 会匹配 x.x.x
那么该如何选择呢？当然你可以指定特定的版本号，直接写 1.2.3，前面什么前缀都没有，这样固然没问题，但是如果依赖包发布新版本修复了一些小 bug，那么需要手动修改 package.json 文件;^和~ 则可以解决这个问题。
但是需要注意^版本更新可能比较大，会造成项目代码错误 ❌，所以建议使用~ 来标记版本号，这样可以保证项目不会出现大的问题，也能保证包中的小 bug 可以得到修复。
版本号写*，这意味着安装最新版本的依赖包，但缺点同上，可能会造成版本不兼容，慎用 ⚠️。
多人开发时依赖包安装的问题 看了上面版本号的指定后，我们可以知道，当我们使用了^和~来控制依赖包版本的时候，多人开发，就有可能存在大家安装的依赖包版本不一样的情况，就会存在项目运行的结果不一样。
举个例子: 假设我们在项目中安装了 vue，当我们运行npm install vue -save 的时候，在项目中的 package.json 的 vue 版本是 vue: ^3.]]></description>
</item>
<item>
    <title>前端下载图片或者文件的方式</title>
    <link>https://ballerjay.github.io/posts/a_tag_download/</link>
    <pubDate>Fri, 08 Jul 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/a_tag_download/</guid>
    <description><![CDATA[前端下载资源的方式 目前前端直接下载 web 服务器或者 CDN 静态资源的方式有两种，一个是利用 &lt;a&gt;标签，另一个通过 window.open() 函数。今天重点讲一下 &lt;a&gt; 标签。
&lt;a&gt;标签 标签就是 html 中的超链接标签，但是用过这个标签的同学应该都有这种印象，当超链接链接的内容是图片、视频或者 pdf 时，点击超链接往往会在浏览器的新标签页中打开对应的资源，而不是开始下载。但是其他像压缩包这样的资源，也就是浏览器没办法直接打开的资源则会直接开始下载。问题来了，怎么样让所有的文件都 默认下载而不是打开呢？
HTML5 给 &lt;a&gt; 标签增加了一个 download 属性，当 &lt;a&gt; 标签戴上了 download 属性时，点击超链接则会被浏览器解析为下载而不是打开。
下面我们实际操作一下
一个不带 download 属性的 &lt;a&gt; 标签案例:
浏览器打开之后，点击下载图片查看效果。
随后浏览器打开了图片，但是并没有下载。
&lt;a&gt;标签添加 download 属性后,在试一次
添加 download 属性后，再次点击
可以看到我们的图片已经下载，达到了我们想要的效果。
我们把 &lt;img&gt; 和 &lt;a&gt; 标签的路径换成一张网络图片，而非本地的图片。
点击下载图片，会发现并没有下载，而是在浏览器中打开了图片。
注意: 如果你的图片渲染不出来，请在标签内加入 &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;
我们开始分析没有下载的原因
很可能是浏览器的 同源策略 导致 download 属性失效造成的。同源策略是浏览器的一种安全策略，所谓的同源指的是 URL 地址里面的协议、域名和端口号均相同，如果一个站点开启了同源策略，也称为禁止跨域访问；这时，这个站点的资源自允许在该站点内部跳转和访问，不允许被第三方站点访问和跳转。我们这个案例中由于源 cnblogs 的服务器设置了禁止跨域，在我们这个场景下的表现就是不能在非 cnblogs 站点下直接下载 cnblogs 文件，所以这里 download 属性会失效，而失效之后做的仅仅是跳转功能。]]></description>
</item>
<item>
    <title>总结 ES2015 的所有新特性</title>
    <link>https://ballerjay.github.io/posts/es2015/</link>
    <pubDate>Wed, 15 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/es2015/</guid>
    <description><![CDATA[总结 ES2015 的所有新特性 💥 ES2015(ES6)是改动最大的一个版本，大体如下: 🍏 let、const关键字和块级作用域 在ES6来临之前，我们习惯于var 关键字声明变量，var声明的变量是属于全局变量，最终会挂载到window对象，这一操作可能会引起一些意外的错误。所以在ES6中加入了const和let	关键字来声明变量。
let v = 100 v = 200 const a = 1 a = 2; // Uncaught TypeError: Assignment to constant variable. // 报错，const关键字声明的是一个常量，是不可以改变的（针对于基本数据类型） { var a = 100 } { let b = 100 } console.log(a) // output: 100 console.log(b) // 报错，b is not defined. // let声明的变量只能在当前的`块级作用域({} 之间的区域)`中使用 ⚠️ let、const声明的变量存在一个暂时性死区的问题
a = 1; let a = 0;// Uncaught ReferenceError: Cannot access &#39;a&#39; before initialization // 暂时性死区是指使用let、const关键字声明的变量在定义之前是不可以使用的，声明之后才可以使用。 🍐 函数的扩展（函数形参的默认值、箭头函数） 函数默认值]]></description>
</item>
<item>
    <title>ES2022 都有哪些新特性</title>
    <link>https://ballerjay.github.io/posts/es2022/</link>
    <pubDate>Wed, 25 May 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/es2022/</guid>
    <description><![CDATA[ES2022 有哪些新特性！ 1. Object.hasOwn() 在ES2022之前，可以使用Object.prototype.hasOwnProperty() 来检查一个属性是否属于对象。
Object.hasOwn特性是一种更简洁、更可靠的检查属性是否直接设置在对象上的方法:
const example = { property: &#39;123&#39; } console.log(Object.prototype.hasOwnProperty.call(example,&#39;property&#39;)); console.log(Object.hasOwn(example,&#39;property&#39;)) // output: true true 该特性的浏览器支持如下所示：
2. at() at() 是一个数组方法，用于通过给定索引来获取数组元素。当给定索引为正时，这种新方法与使用括号表示法访问具有相同的行为。当给出负整数索引时，就会从数组的最后一项开始检索：
const arr = [0,1,2,3,4]; console.log(arr[arr.length - 1]); // 4 console.log(arr.at(-1)); // 4 除了数组，字符串也可以使用at()方法进行索引：
const str = &#34;hello world&#34;; console.log(str[str.length - 1]); // d console.log(str.at(-1)); // d ]]></description>
</item>
<item>
    <title>最长公共前缀</title>
    <link>https://ballerjay.github.io/posts/longestcommonprefix/</link>
    <pubDate>Thu, 19 May 2022 00:00:00 &#43;0000</pubDate>
    <author>Summer</author>
    <guid>https://ballerjay.github.io/posts/longestcommonprefix/</guid>
    <description><![CDATA[leetcode-14-最长公共前缀 题目地址
题目描述 编写一个函数来查找字符串数组中过的最长公共前缀。
如果不存在公共前缀，返回空字符串“”。
示例 1:
输入：strs = [&#34;flower&#34;,&#34;flow&#34;,&#34;flight&#34;] 输出：&#34;fl&#34; 示例 2:
输入：strs = [&#34;dog&#34;,&#34;racecar&#34;,&#34;car&#34;] 输出：&#34;&#34; 解释：输入不存在公共前缀。 提示：
1 &lt;= strs.length &lt;= 200 0 &lt;= strs[i].length &lt;= 200 strs[i] 仅由小写英文字母组成 解题思路 获取字符串数组中的最长公共前缀，就是取出字符串中的每一个子字符一一进行对比，如果都相同，则比较下一位子字符，否则终止对比。
具体思路如下：
let curIndex = 0; 记录当前对比字符的下标 let curStr = &ldquo;&rdquo;; 记录当前比较的字符的值 let flag = true; 判断本次字符串比对是否全部相同 使用 while 循环，当 flag 为假时推出循环。 如果当前处理的是字符串数组中的第一个字符串，说明开始了一次新的循环，根据下标curIndex更新curStr。 否则通过curIndex获取当前的字符串和cueStr对比，如果不同，则flag = false推出循环。 如果处理到了字符串数组中的最后一个字符串，则说明本次循环成功，更新下标向后移一位。 当 while 循环结束时，说明已经获取到了第一个不满足条件的下标位置，根据curIndex截取第一个字符串。 代码实现 function longestComminPrefix(strs) { if (strs.length === 0) return &#34;&#34;; let len = strs.]]></description>
</item>
</channel>
</rss>
